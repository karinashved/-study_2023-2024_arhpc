%include 'in_out.asm'

SECTION .data
msg db "Результат: ",0

SECTION .text
global _start
_start:
    pop ecx         ; Извлекаем количество аргументов в `ecx`
    pop edx         ; Извлекаем имя программы в `edx`
    sub ecx, 1      ; Уменьшаем `ecx` на 1 (количество аргументов без названия программы)
    mov esi, 1      ; Устанавливаем начальное значение для произведения (1)

next:
    cmp ecx, 0      ; Проверяем, есть ли ещё аргументы
    jz _end         ; Если аргументов больше нет, выходим из цикла
    pop eax         ; Иначе извлекаем следующий аргумент из стека
    call atoi       ; Преобразуем аргумент из строки в число
    imul esi, eax   ; Умножаем текущий результат на аргумент (esi = esi * eax)
    loop next       ; Переход к обработке следующего аргумента

_end:
    mov eax, msg    ; Вывод сообщения "Результат: "
    call sprint
    mov eax, esi    ; Записываем произведение в регистр `eax`
    call iprintLF   ; Печать результата
    call quit       ; Завершение программы

